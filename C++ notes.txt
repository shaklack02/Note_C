C++ Notes : 
------------------------------------
youtube:    "How the C++ Linker Works" 

static :    if you make anything static, its mean that you gonna use what ever you made static 
            only in the file where you created the static thing. 
            Example: if you will make function static its means that you not gonna be able to use that 
            fanction in other files or call it from other file, (same about varibles). Vary usefull !!!

inline:     if you make a function inline ites means that insted of call the function its just gonna coppy the
            body of the function the the place where you called it.
            its the same a marking an varible as private.

extern:     extern mean that a linker should look for the deffinition out side the file with that you can do the folow: 
            example:
            tes1.cpp:
            extern int var;
            prinf(var);              With extern the linker knows that the definition of var is outside the file so he should look outside the file for the int var.
            test2.cpp:               so the outpur will be  (5) which is var from test2.cpp.
            int var = 5;                        


coperation: int x = 5; 
            bool _check = x == 5;  the operator == is a overload operator which means that firs it will check if 
                                   x == 5 then will save the resoult in to the _check.
                                   first the operator == will exicute since it is Overload operator then the the operator =
                                   will be exicute, at the end _check will be true or folse.

Casting:    int var = 5 ;
            double * ptr = (double*)&var;  since var is int you can't' save its the address of var to the different pointer type
            void* ptr;                     to do so yo have to cast the int pointer to a double one and you do it with : (double*).
            *ptr = 5;                      now we are direferesnsing the pointer to asing a value to var ofcourse it will give error
                                           since the compiler dont know what is the type of that 5 or what is it.

            void* ptr;                     To fix it we just telling the compiler what kind of pointer it should consider 5 as.
            *ptr = 5;                      error.
            FIX;
            Int *p                                     
            *ptr = 5;
            (*ptr)++;                      to incrise the value of var we have to tell the compiler to direference first then 
                                           incriment it since ++ is a overload operator it will do the == then will dereference it.
                                            
            int a = 5;
            int b = 4;
            int& ref = a;                  when you making a ref you can only assing it to somethign at the first time you can't' do it later.
            ref = b ;                      Eroor. if you do so the a will be = to b.


Pointer to Pointer:         char exp; 
                            char** prt = &exp;    ptr will stores a pointer that points to other pointer that have inside the address of exp;


Virtual and Override:                      Virtual infront of function means that there is a two function with the same name so for the compiler 
                                           to know to which Entity the functions belongs, same with Override.
                                           override introdused in c11 as Virtual. for more check in youtube: TheChernoProject "Virtual Functions in C++"

                                           Example how to use: 
                                           class Entity 
                                           {                                       
                                           Virtual std::string FunName(){};              
                                           }
                                           class Player : public Entity
                                           {
                                           std::string FunName() Override {};   same function in the both classies so to not make problem 
                                           }                                    using Vortual and override to know that one is from entity and other from Player
                                           


        



            
            

            
















